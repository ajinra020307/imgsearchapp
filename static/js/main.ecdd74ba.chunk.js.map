{"version":3,"sources":["components/Navbar/Navbar.jsx","components/imageresults/imageresults.jsx","components/search/search.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","React","Component","Imageresults","state","open","currentimg","close","setState","img","this","imagecontent","images","props","GridList","cols","className","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","Fragment","modal","onRequestClose","style","width","Search","searchtext","amount","apiurl","apikey","inputhandler","e","target","value","search","Axios","get","then","res","console","log","data","hits","length","alert","catch","selecthandler","i","v","name","onChange","floatingLabelText","FloatingLabelText","primaryText","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecdd74ba.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar'\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return (\r\n        <AppBar \r\n          title=\"Pixabay image search\"\r\n        />\r\n            )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {GridList,GridTile} from 'material-ui/GridList'\r\nimport IconButton from 'material-ui/IconButton'\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\r\nimport Dialog from 'material-ui/Dialog'\r\nimport FlatButton from 'material-ui/FlatButton'\r\n\r\nclass Imageresults extends React.Component{\r\n    state={\r\n        open:false,\r\n        currentimg:''\r\n    }\r\n    open(img){\r\n        this.setState({open:true,currentimg:img})\r\n    }\r\n    close=()=>{\r\n        this.setState({open:false})\r\n\r\n    }\r\n    render(){\r\n        let imagecontent;\r\n        const {images}=this.props\r\n        if(images){\r\n            imagecontent=(\r\n               \r\n               \r\n               <GridList cols={3} className=\"grid\">\r\n                  {images.map((img)=>{\r\n                      return(  <GridTile\r\n                           title={img.tags}\r\n                           key={img.id}\r\n                           subtitle={<span>By <b>{img.user}</b></span>}\r\n                           actionIcon={\r\n                                <IconButton onClick={()=>{this.open(img.largeImageURL)}}>\r\n                                    <ZoomIn color='white'></ZoomIn>\r\n                                </IconButton>\r\n                            }>\r\n                            <img src={img.largeImageURL} alt=\"\"></img>\r\n                        </GridTile>)\r\n                    })\r\n                  }\r\n               </GridList>\r\n               \r\n            )\r\n        }else{\r\n            imagecontent=null\r\n        }\r\n        const actions=[\r\n            <FlatButton\r\n               label='close'\r\n               primary={true}\r\n               onClick={this.close}>\r\n                \r\n            </FlatButton>\r\n        ]\r\n        return (\r\n            <React.Fragment>\r\n          <div>\r\n              {imagecontent}\r\n          </div>\r\n            <Dialog \r\n            actions={actions}\r\n            modal={false}\r\n            open={this.state.open}\r\n            onRequestClose={this.close}\r\n              >\r\n               <img src={this.state.currentimg} style={{width:'100%'}} alt=\"\"/>\r\n                </Dialog>\r\n            </React.Fragment>\r\n            )\r\n            \r\n    }\r\n}\r\n\r\nImageresults.propTypes={\r\n    images:PropTypes.array.isRequired\r\n}\r\nexport default Imageresults","import React from 'react'\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem'\r\nimport Axios from 'axios'\r\nimport Imageresults from '../imageresults/imageresults'\r\nimport RaisedButton from 'material-ui/RaisedButton'\r\n\r\nclass Search extends React.Component{\r\n    state={\r\n        searchtext:\"\",\r\n        amount:15,\r\n        apiurl:'https:www.pixabay.com/api',\r\n        apikey:'13125349-1eb6aee9c76c8f3e9815cc88c',\r\n        images:[]\r\n    }\r\n    inputhandler=(e)=>{\r\n        this.setState({searchtext:e.target.value})\r\n                      }\r\n    search=()=>{\r\n            \r\n            Axios.get(`https://pixabay.com/api/?key=${this.state.apikey}&q=${this.state.searchtext}&image_type=photo&per_page=${this.state.amount}`)\r\n            .then(res=>{\r\n                console.log(res)\r\n                if(res.data.hits.length>0){\r\n                    this.setState({images:res.data.hits})\r\n                    this.setState({searchtext:\"\"})\r\n                }else{\r\n                    alert('no results found')\r\n                }\r\n                \r\n            })\r\n            .catch(e=>{console.log(e)})\r\n        \r\n    }\r\n    \r\n    selecthandler=(e,i,v)=>{\r\n        this.setState({amount:v})\r\n    }         \r\n    render(){\r\n        return (\r\n            <React.Fragment>\r\n        <TextField\r\n          name=\"Search\"\r\n          value={this.state.searchtext}\r\n          onChange={this.inputhandler}\r\n          floatingLabelText=\"search for images\"\r\n          \r\n        />\r\n        <RaisedButton\r\n             label=\"search\"\r\n             primary={true}\r\n             onClick={this.search}>\r\n             \r\n          </RaisedButton>\r\n          <br />\r\n        <SelectField \r\n           name=\"amount\"\r\n           FloatingLabelText=\"Amount\"\r\n           value={this.state.amount}\r\n           onChange={this.selecthandler}\r\n           >\r\n           <MenuItem value={5} primaryText=\"5\"/>\r\n           <MenuItem value={10} primaryText=\"10\"/>\r\n           <MenuItem value={15} primaryText=\"15\"/>\r\n\r\n\r\n        </SelectField>\r\n          \r\n           <br />\r\n           \r\n           {this.state.images.length>0? <Imageresults images={this.state.images}/>:null}\r\n            </React.Fragment>\r\n        \r\n            )\r\n    }\r\n}\r\n\r\nexport default Search","import React from 'react';\nimport Navbar from './components/Navbar/Navbar'\nimport Search from './components/search/search'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MuiThemeProvider >\n      <Navbar />\n      <Search />\n      </MuiThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}